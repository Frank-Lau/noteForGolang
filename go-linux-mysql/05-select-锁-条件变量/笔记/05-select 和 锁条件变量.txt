select ：
	监听 channel 上的数据流动 (r事件、w事件)

	语法参照 switch case ：

		select {
			case 监听channnel的 r/w 操作（IO）：		
			case 监听channnel的 r/w 操作（IO）：
			。。。。
		}

	使用注意事项：

		1. case 分支只能包含  IO 操作。
	
		2. 当case分支不满足时，阻塞当前case。

		3. 当多个case分支同时满足，随机任意一个执行。

		4. 大多数情况下，select 放置于 for 循环中，循环监听各个case 上的 IO事件

		5. default 是在所有case都不满足，走的分支。防止操作系统 忙轮询 。通常情况下，将default省略。

	break关键字，在 select 中跳出 当前的case分支 ( 与switch一样 )。  return、Goexit、os.Exit()

	goto关键字，Lable标签。 跳转至函数内部的任意位置Lable处。但是不允许从一个case分支跳转到另一个分支

	【重点】： 在使用 select 了监听的 go程中，与其他go程间，采用的是异步通信机制。

练习：斐波那契数列：

	1， 1， 2， 3， 5， 8， 13， 21， 34， 55， 89 。。。

	x, y := 1, 1
	x, y = y, x+y

超时退出：【重点】

	1. 在 select 的一个 case 中监听  time.After(定时时长) 的 读事件。

	2. select 的 ch 数据读取 channel 监听case上，如果有数据流动。会将 定时退出的case 定时时长【重置】！！！

	3. 在定时时长内，ch上没有数据流动。  time.After 定时满，才能执行退出操作。

死  锁：
	不是锁的一种。是错误使用锁的一种状态。 ―― 运行时， go build xxx.go 查看不到。 编程时提早预见！提早规避。

	死锁1：同一个go程，对同一个 channel 自己读、自己写。

	死锁2：不同go程使用同一个channel通信。 对channel读、写 放在 go程创建之前。????????????????????????????????????????未理解

	死锁3：两个go程在多个channel上，相互阻塞等待。

	死锁4：互斥量、读写锁，与 channel 交叉混用。  ―― 尽量避免在编程时，混用两类同步机制。(例如把channel当做公共内存,对channel访问时加读写锁,

这时,如果读先拿到锁会阻塞在channel上,而写会阻塞在锁上,并且该种死锁不会有任何的提示信息,千万注意!!!!!!!!!!!!!!!!!!!!)

互斥锁、互斥量：

	本质是一个 struct 。在各个go程之间 采用排他处理方式。

	var mutex sync.Mutex 

	lock(): 加锁

	Unlock() : 解锁

	对公共区，访问之前加锁、访问结束立即解锁。锁的粒度越小越好。

读写锁：
	读共享、写独占。	―― 写go程，以写模式加锁。彼此互斥。 读go程以读模式加锁。彼此共享。

	写锁优先级高于读锁。

	创建 读写锁： var rwlock sync.RWMutex ―― 本质：struct

	读模式加锁： RLock()

	读模式解锁： RUnLock()

	写模式加锁： Lock()

	写模式解锁： UnLock()

条件变量使用步骤： 以生产者为例: 	【难点】

	1. 创建条件变量 	var cond sync.Cond 

	2. 给条件变量绑定锁	 cond.L = new(sync.Mutex)

	3. 给条件变量的锁，加锁。	cond.L.Lock()

	4. 使用 for 判断条件变量是否满足， 调用 wait()	1)阻塞(等待条件变量满足)	2)解锁  。。。等待被唤醒(释放互斥锁,相当于unlock,前两步为原子操作)	
		
		3)再加锁

	5. 访问公共区， 产生数据。

	6. 解锁 cond.L.Unlock()

	7. 唤醒对端（阻塞在条件变量上的 消费者）	cond.Signal() / cond.Broadcast()不建议使用,会触发  惊群效应
	
致使cpu使用率急剧上升(因为会唤醒全部阻塞线程,共同争夺cpu)


条件变量的作用:		在共享资源的状态发生变化时,通知阻塞在某个条件上的协程,通常是与锁一起使用


	

	



















		

		
