
指针：
	指针本质是地址。 指针变量，就存储地址的变量。

	var a int = 10

	var p *int = &a  

	*p

指针使用注意事项：

	空指针： 指向一片空地址

		var p *int	---> nil 

	野指针：指向一片未知（无效）地址

	new（）： 数据类型的 默认值： int 0 / bool  false / string ""	

		%q : 以 Go语言格式显示字符串。 每个字符串默认显示“”
			
栈帧：
	开辟在stack上的一块内存区域，用来给函数运行提供空间。 随着函数调用产生，随着函数调用完成（结束）释放。

	存储 1. 局部变量   2. 形参  3. 临时值。 形参在内存存储上和局部变量地位等同。
		
	所谓的开辟栈帧,无非就是栈顶指针和栈基指针由原本的指向同一位置,栈顶指针下移,错开一段距离,这就是开辟栈帧,main函数调用时
		
	会错开一段距离,即栈基指针的栈顶指针之间的距离就是为main开辟的空间,当调用其他函数时,也需要这样的空间,但是栈顶指针和栈基

	指针只有一份,所以需要 临时值 记录之前的栈基指针和栈顶指针的位置 类型的18

左值和右值：

	左值：在“=”左边。 指代 变量所描述的 内存。

	右值：在“=”右边 或 等同于赋值符右边的值。 指代 变量描述内存空间中的数据值。


指针做函数参数、返回值：

	在 A 栈帧空间内存，借助地址， 修改 B 栈帧空间内某些变量的值。

---------------------------------

为什么使用切片：

	1.  数组的大小固定。

	2.  不能随意扩容。

	go语言中，我们常常使用 切片 代替 数组。

数组和切片定义语法区别：

	数组：[ ] 中 写实际大小，或 ...  

	切片：[ ] 中 空

slice本质：

	切片不是指向底层数组的指针。而是重新定义的一种新数据结构。 结构中包含指向底层数组的 指针。

	type slice struct {				go语言源码包  runtime/slice.go  查看源码
		*pointer	---> 指向底层数组
		len
		cap
	}

使用的语法：

	slice[low:high:max]

		low : 起始下标位置。（包含）

		high：结束下标位置。（不包含）   len = high-low

		max： cap = max - low

	slice[low:]  从起始，到结束

	slice[:high] 从 0 开始，到 high-1 结束  【常用】

	slice[low:high]  从low起始，到 high-1 结束

从数组中截取切片：

	切片截取数组时， 不管有多少层套用，最终操作的都是 “原数组”。

	截取 数组/切片 时，如果没有指定 max。 那么max跟随 截取目标的（数组/切片）的 容量（cap）

	截取 数组/切片 时，如果指定 max。max 不能超过截取对象（数组/切片）的 容量cap

定义语法：

	1.  s1 := []int {1, 2, 3, 4, 5}  自动推导类型

	2. s2 := make([]int, len, cap)    指定 len、 cap

	3. 【常用】s3 := make([]int, len)   指定len，不指定 cap ， cap == len	


切片常用操作函数：

	append（待追加切片， 元素） ―― 传 值。 【常用】

		参1， 不允许是 数组。  

		返回值， 赋值给原切片。

	copy(dst, src)  ―― 将 src 拷贝给 dst。 对应下标位置进行拷贝赋值。

	dst := []int{8, 9}

	src := []int {1, 2, 3, 4}

切片做函数参数：―― 传值 

	type slice struct { 当中，包含对原底层数组的引用 ( *pointer )。

	1。 切片做函数参数， 不会对原切片扩容，直接借助 地址 修改源切片。

	2.  切片做函数参数， 会对原切片扩容，不会修改原切片。 修改的是 扩容后的新切片。 ―― 返回值将修改返回给调用者。

练习：
	练习1 - []string 去空串：

		使用append实现。

		不使用append实现。

	练习2 - []string 去重：

	练习3 - []int 去指定元素：

---------------------------------

map：
	字典、映射。 key -- value

	key： 唯一。不能是浮点型、含有引用语义的数据类型。

定义语法：
	
	map[key类型]value类型

	1.  m1 := map[int]string {100:"aaa", 200:"bbb", 300:"ccc"}

		注意： key值不能重复。

	2. m2 := make(map[int]string)		【常用】

		未指定容量。 初始容量为 0 。 后续使用中可以自动扩容。   ――  map不能使用 cap()

	3.  m2 := make(map[int]string, 5)	

		5 表示 初始容量。  len（m2）求取的是 实际map中存储的元素个数

	4. var m4 map[int]string

		不能直接赋值。没有空间。  借助 make 开辟空间。	变量的声明不会开辟空间
赋值：
	1. m1 := map[int]string {100:"aaa", 200:"bbb", 300:"ccc"}

	2. m2 := make(map[int]string)
		m2[100] = "abc"
		m2[200] = "xyz"

	        如果key值重复，后一次赋值，会覆盖前面的key-value
		
	new可以用来创建 指针 和 结构体,make可以用来创建slice,map,channel

使用注意总结： 	

	1.  唯一。不能是浮点型、含有引用语义的数据类型。

	2.  不能对map使用 cap 

	3.  没有开辟空间的 map 不能直接赋值。

遍历map

	1. for key，value := range  map对象 

	2. for _，value := range  map对象 

	3. for key，_ := range  map对象 

	4, for data := range  map对象  ――  data 存储map中的 key
	
判断 map 中key是否存在

	if val,  isTrue := map[key] ； isTrue==true {

	}

	1. 如果map中 key存在， 返回value值保存到变量“val”中。 同时 isTrue 被置为 true

	2. 如果map中 key不存在， 变量“val”中存储数据类型默认值。 同时 isTrue 被置为 false

删除map

	delete（参1， 参2）

		参1：map对象

		参2：map的key

map传参、返回值：

	传引用。

	

	
	
	

	




	

	























			