
\r:	回车

\n:	换行

Linux： 回车、换行 ――> \n

windows:  回车、换行 ――> \r\n

TCP-CS-并发客户端：

	1. 发起连接请求 net.Dial()	defer conn.Close()

	2. 创建子 go 程， 循环， 获取用户键盘输入	for  os.stdin.Read()

	3. 将读到的数据，写给服务器 	conn.write()

	4. 主 go 程 循环 读取服务器 回发数据。  for  conn.read()

	5. n == 0 可判定服务器关闭 连接。

三次握手：【重点】目的:协商,协商出  双方发送数据包 序号初始值, 传输片段的大小 等

	主动发起连接请求端（客户端）， 发送 SYN 标志位。携带数据包包号。<mss 1046>mss代表推荐的最大段尺寸,由链路层决定,因为尺寸如果过大,会在网络层分割,导致性能下降

		(这个数据包包号作用是在网络传输中作为临时的地址标记,并且没发送一个字节,包号将进行+1操作,利用包号完成  tcp 的 有序传输 和 检查是否丢包,进行丢包重传)
		
		SYN标志位都会携带  滑动窗口:标注缓冲区大小,如果扔一个包等一个ACK,这样效率低,所以可以一次扔多个包,然后根据序号确认顺序,并且根据序号确定对应的ACK,判断
	
		是否丢包重传

	被动接收连接请求端（服务器端）,  发送 ACK 标志位。携带确认序号。 【同时】发送 SYN 标志位。携带数据包包号。<mss 1024>确定最大尺寸为1024

	主动发起连接请求端（客户端），发送 ACK 标志位，携带数确认序号。

		注意: 这个ack确认信号是非常重要的,因为tcp协议数据发送之后是暂存在 传输层 的 缓冲区 中,直到收到ACK之后才会确认成功发送,释放内存,如果迟迟收不到,会再次重传

四次挥手：【重点】

	主动发起关闭连接请求端（客户端）， 发送 FIN 标志位。 携带 数据包包号。

	被动接收关闭连接请求端（服务器端）， 发送 ACK 标志位。携带确认序号。	

		主动发起关闭连接请求端收到 ACK ―― 半关闭状态！！！半关闭状态只能接受数据,不能发送数据,那为什么还能给server短发送ACK呢?标志位和数据是分开存储的
		
		,不能发送数据,但是可以发送标志位

	被动接收关闭连接请求端（服务器端）， 发送 FIN 标志位。 携带 数据包包号。

	主动发起关闭连接请求端（客户端），发送 ACK 标志位。携带确认序号。	―― 4次挥手 彻底 完成。

		实际上四次挥手之后 client 还会等待一会,看 server是否还会继续发送 FIN ,因为有可能server短并没有收到ACK,所以会继续发送FIN

TCP状态转换：
	
	主动端 连接：

		CLOSE状态 ――> 发送 SYN 标识位 ――> SYN_SEND状态 ――> ESTABLISHED 数据传输状态

	主动端 关闭：

		ESTABLISHED 数据传输状态 ――> 发送 FIN ――> FIN_WAIT_1 ――> 接收 ACK ――> FIN_WAIT_2 ――> 半关闭状态（主动端）

		――> 收FIN、发ACK ――> TIME_WAIT (等待 2MSL 时长）――> 2MSL 时长过后 ――> CLOSE状态

	被动端 连接：

		CLOSE状态 ――> LISTEN状态  ――> SYN_RCVD状态 ――> ESTABLISHED 数据传输状态

	被动端 关闭：

		ESTABLISHED 数据传输状态 ――> 接收 FIN、ACK回复  ――> CLOSE_WAIT（对应半关闭状态 ）――> 发送FIN 

		――> LAST_ACK ――> 收到ACK  ――> CLOSE状态


在 windows 终端下，查看 TCP 通信状态：	

	netstat -an | findstr “端口号”

	Linux： netstat -an | grep “端口号”

-----------------------------

【重点】

TCP：面向连接的，可靠的数据包传输。	不稳定的网络层，进行完全弥补。（丢包重传）

UDP：无连接的，不可靠的数据包传递。	不稳定的网络层，进行完全不弥补。 （还原网络状态）

		优点				缺点

TCP	稳定、顺序、可靠			开销大、速度慢、编程实现繁复

UDP	开销小、速度块、编程实现简单		不稳定、顺序不保证、不可靠

使用场合：
	TCP： 对数据内容、安全性、完整性要求较高的场合。	e.g. 网络文件的上传、下载。

	UDP:  对数据实时性要求高，允许数据包适当丢失场合。  e.g.  游戏、直播、在线视频、在线电话会议。。。

----------------------------

UDP-CS-server：

	1.  创建udp地址结构  	      net.ResolveUDPAddr("udp", "IP:port")	――> udpAddr

        type UDPAddr struct {
	IP   IP
	Port int
	Zone string // IPv6 scoped addressing zone
        }
	2.  创建用于通信socket 	 net.ListenUDP("udp", udpAddr) 	――> udpConn

	3.  使用 socket read 对端 发送的数据。 	udpConn.ReadFromUDP(buf)	――> n，clientAddr， err

	4.  使用 socket 写数据给 客户端 		udpConn.WriteToUDP(数据， clientAddr)

	5. 开启 终端， 使用 nc  IP  port  -u  模拟启动 客户端 测试。

UDP-CS-clinet：

	1. 创建用户通信的套接字	net.Dial("udp", "服务器的IP + port")	――> conn  
	
	2. 剩余实现步骤，参考 TCP 客户端实现。

UDP服务器 默认 支持并发。

--------------------------------

获取文件属性函数：

	fileInfo：os.stat(文件访问绝对路径)

	fileInfo 接口，两个接口。

		Name() 获取文件名。 不带访问路径

		Size() 获取文件大小。

命令行参数： 在main函数启动时，向整个程序传参。 【重点】

	语法： go run xxx.go	  argv1 argv2  argv3  argv4 。。。

		xxx.go:  第 0 个参数。
		argv1 ：第 1 个参数。
		argv2 ：第 2 个参数。	
		argv3 ：第 3 个参数。
		argv4 ：第 4 个参数。

	使用： list := os.Args  提取所有命令行参数。

网络文件传输 ―― client端（发送端）

	1.  建立通信用的 socket 	conn, err := net.Dial("tcp",  "127.0.0.1:8008")

	2.  获取命令行参数，得到带有路径的 文件名		os.Args

	3.  使用 os.stat() 获取 文件名（不含路径）

	4.  使用 conn 将文件名 write 给 server端（接收端）

	5.  使用 conn 读取 server端（接收端）回发的 “ok”

	6.  判断如成功读到 ok 。 封装函数 sendFile（带路径的文件名, conn）

	7. 实现  sendFile（带路径的文件名, conn）

		1） 打开文件（含路径）

		for {

		2） 读取文件内容 ， 存到缓冲区中

		3） 将缓冲区读到的数据 ，写给 server端（接收端） conn.write

		4） 判断读到文件结尾 。结束文件读取 。 跳出循环。
		}

网络文件传输 ―― server端（接收端）

	1.  创建监听套接字  net.Listen()  --- listener

	2.  阻塞监听 发送端连接请求  listener.Accept()  --- conn

	3.  读取 发送端发送的文件名（不含路径）conn.read . 保存文件名

	4.  回发的 “ok”给发送端

	5.  封装函数 recvFile（文件名，conn  ）

		1）创建新文件名  os.Create()

		for {

		2)  循环 从 conn 中读取 发送端发送来的 文件内容。  存buf 

		3）写到 本地文件中

		4）n == 0  数据传输完成。 break 出 for

		}

	















	