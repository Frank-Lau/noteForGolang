
SQL语句分类：

	1. DML： insert、update、delete、select

	2. DDL： create、truncate、alter、drop

	3. DCL： commit、rollback

引擎和表数据文件：

	表数据文件存储位置： /var/lib/mysql

	一个数据库文件，对应  /var/lib/mysql 目录下的 一个 同名目录 ， 如： 数据库db1 ――> /var/lib/mysql/db1/

	数据库中的一个表：

		innodb：2个文件：表名.frm、 表名.ibd

				表名.frm：表结构

				表名.ibd：表数据相关索引

				innodb引擎的表数据存放在  ../ibdata1 文件中，该文件会随着表数据量自动增长。ibdata2、ibdata3、。。。

		myisam: 3个文件： 	表名.frm：表结构

				表名.MYI：表数据相关索引

				表名MYD：表数据

	推荐使用 innodb引擎,允许设置外键,myisam不允许。

MySQL数据库字符集：

	在一条数据库记录中，保证‘中文’能正常读取。至少需要统一以下 4 部分字符集：

		MySQL客户端字符：	Linux 可以使用 echo $LANG 查看-----ZH-cn.utf8

		character_set_client： 

		character_set_database:

		character_set_result:

	show variables like 'char%' 查看当前MySQL数据库使用字符相关。

	使用 set names utf8 一次性设置 character_set_client、character_set_database、character_set_result。

	使用 set character_set_server=utf8 设置 单个字符集。 但此种方法数据库重启时效。 ―― /etc/ 配置文件永久设置。

数据类型：

	数值类型：
				有符号数			无符号数

		tinyint：  1字节	-2^7 - 2^7-1		0~2^8 -1

		smallint：2字节	-2^15 - 2^15-1		0~2^16 -1

		mediumint: 3字节	-2^23 -2^23-1

		int  	4字节	-2^31 - 2^31-1

		bigint  	8字节	-2^63 - 2^63-1

		int（5）―― 123 ―― 00123

		数据类型的“显示宽度”。表示默认显示数据的位数，不足可以用 0 填充。 需要制定 zerofill。

		数据类型的“显示宽度”。不能影响数据存储上限。  受数据类型限制。

	浮点型：
	
		float 单精度。	float(总位数， 小数位数)

		double 双精度。	double (总位数， 小数位数)

		小数部分超出设置，四舍五入。

		整数部分超出， 报错。

		浮点数特性：会有精度损失。 ―― 对数据要求精度严格，不选用浮点数。

	实点型(定点数)：
		decimal。 无存储上限。	decimal(总位数， 小数位数)

		将 整数、小数部分 分开存储。以达到不丢失精度的目的。但要牺牲存储空间。
	
	字符型：
		char：定长字符串	指定 最大长度（单位字符）―― 255字符(不是字节)。	实际存储是不能超出。【重点】

			char 指定的最大长度空间固定。即使没有用尽不能回收。	效率高，浪费空间

		varchar：变长字符串。  指定 最大长度（单位字符）―― 65535字节(不是字符)	实际存储是不能超出。 【重点】
	
			varchar 指定的最大长度空间没用尽可以回收。	节省空间，效率。

			实际存储的字符数，受限：
	
				1） 字符编码: utf8 ―― 1个字符：3个字节。、gbk―― 1个字符：2个字节。

				2） 一条记录最大长度。不能超过 65535 [重点]

		文本类型：
			tinytext：
			
			text：
	
			mediumtext：

			longtext
			
			文本类型的字段中，实际存储的不是数据值。而是数据值的地址。因此大约占用10字节左右空间大小。不会超过65535

	枚举类型：

		enum（枚举值1， 枚举值2，枚举值3.。。。）

		枚举值从 1 开始，最大65535。

		本质:实际插入数据库的是 字符串对应的 数值。

		优点：
			1.  节省空间(实际存储字符串对应的数值,select sex+0 from tb8;输出字符串对应的数值,说明实际存储的是数值,因为字符串不能和0相加,只有数字才行)

			2.  限定用户输入数据，保证数据完整性。

			3.  运行速度快(数字比字符串运算速度快)。
	
	集合类型：

		set（列举值1， 列举值2 。。。）

		实际插入数据库的是 字符串对应的 数值。 2^0, 2^1, 2^2, 2^3 ....

		优点同上。创建表时set('篮球','足球','羽毛球')  插入时insert tb3 values(3,'篮球,羽毛球'); 切忌单引号使用方式
		
		否则报错Column count doesn't match value count at row 1(列计数与第1行值计数不匹配)

	日期时间类型：

		所有的时间、日期类型都当成字符串显示。
		
		datetime： '年-月-日 时：分：秒'	1~9999     自动计算、月、日期上限、闰年。

		date：	'年-月-日'

		timestamp(时间戳):  从1970-1-1 00:00:00 ~ 2038年01月19日11:14:07

		time： '时：分：秒 '

	Boolean类型：
		
		true ―― 1

		false ―― 0

列属性：
	空： null

	非空 ： not null

	default： 当字段没有 数据值时，显示默认值。例：

create table test(
    id int primary key,
    addr varchar(20)  default '地址不详'
);
	【自动增长】：auto_increment

		1.  推荐数值列，从1开始，不重复。

		2.  默认都是无符号整数
		
		3.  自动增长列必须是主键。   反之，主键不一定是自动增长列。

		4.  插入默认自动增长列，显示、隐式插入 null

		5.  已经删除掉的自动增长编号，不能自动重复使用。

		创建表时指定：

       create table 表名( 
	字段名 数据类型 auto_increment primary key,
	字段名 数据类型
       );
		修改表时指定：

       create table 表名( 
	字段名 数据类型,
	字段名 数据类型
       );

       alter table 表名 change 旧字段名 新字段名 新数据类型 auto_increment primary key；
	

	【主键】： primary key:
	
		创建方式一：

       create table 表名( 
	字段名 数据类型 primary key,
	字段名 数据类型
       );
		创建方式二：

       create table 表名( 
	字段名 数据类型,
	字段名 数据类型,
	primary key(字段名)
       );
		创建 组合主键：

       create table 表名( 
	字段名 数据类型,
	字段名 数据类型,
	primary key(字段名1, 字段名2)
       );	

		修改表，添加主键，方法一：
		
			alter table 表名 change 旧字段名 新字段名 新数据类型 primary key；

		修改表，添加主键，方法二：

			alter table 表名 add primary key（字段名）;

		删除主键：

			alter table 表名 drop primary key;

	【总结】：主键的特性：		【重点】

			1. 不能重复、不能为 null。

			2. 一张表只能有一个主键。

		主键的作用：

			1. 保证数据完整性。

			2. 加快数据访问速度。

		主键定义原则：

			1. 尽量选择 数值类型字段

			2. 尽量选择 更新较少的字段。

			3. 尽量选择 一个字段做主键。

	【唯一键】：	【重点】

		创建方式一：

       create table 表名( 
	字段名 数据类型 unique,
	字段名 数据类型 unique
       );
		创建方式二：

       create table 表名( 
	字段名 数据类型,
	字段名 数据类型,
	unique(字段名)，
	unique(字段名)
       );

		修改表添加唯一键；

	alter table 表名 add unique(字段名);

		创建组合唯一键：

       create table 表名( 
	字段名1 数据类型,
	字段名2 数据类型,
	unique(字段名1，字段名1)
       );

		查看唯一键：

		show create table 表名 \G

		自定义唯一键名：

       create table 表名( 
	字段名1 数据类型,
	字段名2 数据类型,
	unique 唯一键名字(字段名1，字段名2)	# 创建组合唯一键。
	unique 唯一键名字(字段名1)		# 创建唯一键。
       );	

		删除唯一键：	利用唯一键名删除。
			
		alter table  表名 drop 【index】唯一键名;	

	【总结】唯一键特性：

		1. 不能重复，可以为空

		2. 一张表可以有多个唯一键。

	备注：comment

	SQL注释：

		单行：      '#'
		
			'-- ': 后面必须先跟一个空格，再跟注释内容。

		多行：     /* xxx */	

		
create table t27(
id int, #这是单行注释
age int -- 这是另一个单行注释
/*
这是
多行
注释
*/
);
	数据完整性： 实体完整性、域完整性、引用完整性。

		实体完整性： 一条记录数据出现完整性缺失。
		
		        保证实体完整性：
			1. 主键约束
			2. 唯一键约束
			3. 自动增长列

		域完整性： 一条记录中的某一个字段出现完整性缺失。
		
		        保证域完整性：
			1. 字段数据类型约束
			2. 非空约束
			3. 默认值

		引用完整性：主从表之间公共字段导致的完整性缺失。

		        保证引用完整性：
			1. 外键约束

	外键约束： 【重点】

		从表主键字段 类型 == 主表主键字段 类型

		创建表时，添加外键约束：

create table 主表名（
字段名1 数据类型 primary key，
字段名2 数据类型
）；

create table 从表名（
字段名1 数据类型 primary key，
字段名2 数据类型，
foreign key（从表字段名1）references 主表名（主表字段名1）
）；

		修改表，添加外键约束：

		alter table 从表名 add foreign key(从表主键字段名）references 主表名（主表主键字段名）

		查看外键：

			show create table 从表名\G

		删除外键：

			alter table stumarks drop foreign key 外键名;

	
	外键严格操作：(想要设置外键必须是innodb引擎,myisam不支持外键)
		
		1.	主表中没有的从表中不允许插入(先插主,再插从)
		2.	从表中有的主表中不允许删除
		3.	不能更改主表中的值而导致从表中的记录孤立存在。
		4.	先删除从表，再删除主表

	扩展：
		指定主表删除从表 置空；

		指定主表更新从表 级联动作（更新）



					

			
		




















		























